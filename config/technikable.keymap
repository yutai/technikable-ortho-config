/*
 * Copyright (c) 2022 Pete Johanson
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define BAS_L 0
#define NAV_L 1
#define NUM_L 2
#define SYM_L 3

// Using layer taps on thumbs, having quick tap as well helps w/ repeating space/backspace
&lt { quick_tap_ms = <200>; };

/ {
    chosen {
       zmk,matrix_transform = &ortho_transform;
    };
    soft_off {
        hold-time-ms = <5000>;
    };
    conditional_layers {
        compatible = "zmk,conditional-layers";
	tri_layer {
	    if-layers = <NAV_L NUM_L>;
	    then-layer = <SYM_L>;
	};
    };

    keymap {
        compatible = "zmk,keymap";


         base_layer {
             label = "Base";
             bindings = <
                 &kp ESC   &kp Q   &kp W      &kp E    &kp R     &kp T     &kp Y     &kp U       &kp I     &kp O   &kp P     &kp BKSP
                 &kp TAB   &kp A   &kp S      &kp D    &kp F     &kp G     &kp H     &kp J       &kp K     &kp L   &kp SEMI  &kp QUOT
                 &kp LSHFT &kp Z   &kp X      &kp C    &kp V     &kp B     &kp N     &kp M       &kp COMMA &kp DOT &kp FSLH  &kp RET
                                   &kp LCTRL  &kp LGUI &mo NAV_L &kp SPACE &kp SPACE &mo NUM_L   &kp RALT  &kp RCTRL
             >;
         };

        nav_layer {
            label = "Nav";
            

bindings = <
        &kp TILDE       &kp EXCL    &kp AT      &kp HASH    &kp DLLR    &kp PRCNT  &kp CARET      &kp AMPS    &kp ASTRK   &kp LPAR    &kp RPAR    &trans
        &kp DEL         &trans      &kp LEFT    &kp UP      &kp RIGHT    &trans     &trans        &kp MINUS   &kp PLUS   &kp LBRC    &kp RBRC    &kp BSLH
        &trans          &trans      &trans      &kp DOWN    &trans      &trans     &trans         &trans      &kp EQUAL   &kp LBKT    &kp RBKT    &trans
                                    &trans      &trans      &trans      &trans     &trans         &trans      &trans      &trans     
            >;
        };

        num_layer {
            label = "Num";
            bindings = <
                &kp GRAVE  &kp C_PREV  &kp C_PLAY       &kp C_NEXT           &kp C_MUTE        &kp C_VOL_DN       &kp C_VOL_UP &kp N7 &kp N8 &kp N9 &kp N0 &trans
                &kp DEL    &trans      &kp LG(LA(N1))   &kp LG(LA(N2))       &kp LG(LS(N8))    &kp LG(LS(N7))     &trans       &kp N4 &kp N5 &kp N6 &kp PG_UP &kp BSLH
                &trans     &trans      &trans           &kp LG(LC(LS(N4)))   &kp LG(LS(N4))    &trans             &trans       &kp N1 &kp N2 &kp N3 &kp PG_DN &trans
                                       &trans           &trans               &trans            &trans             &trans       &trans &kp N0 &kp DOT
            >;
        };

        sym_layer {
            label = "Sym";
            bindings = <
&bt BT_CLR &trans     &trans     &trans      &trans          &trans       &trans     &trans         &trans      &trans     &trans     &kp DEL
&trans     &trans     &trans     &trans      &trans          &trans       &trans     &kp LARW       &kp DARW    &kp UARW   &kp RARW   &trans
&trans     &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2   &bt BT_SEL 3       &bt BT_SEL 4    &trans     &kp HOME       &kp PG_DN   &kp PG_UP  &kp END    &trans
                      &trans     &trans      &trans          &trans       &trans    &trans  &trans         &trans

            >;
        };

    };
};
